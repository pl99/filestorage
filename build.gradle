buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.6.RELEASE"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:2.4.0"
    }
}

apply plugin: org.springframework.boot.gradle.plugin.SpringBootPlugin
apply plugin: io.spring.gradle.dependencymanagement.DependencyManagementPlugin
apply plugin: "java"

group = 'ru.adavantum'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }

    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestCompileOnly.extendsFrom compileOnly
    integrationTestAnnotationProcessor.extendsFrom annotationProcessor
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "Hoxton.SR7")
    set('okhttp3.version',"4.9.1")

}

processResources {
    expand(project.properties)
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=ERROR',
    ]
}


sourceSets {
    integrationTest {
        java.srcDir "$projectDir/src/integration-test/java"
        resources.srcDir "$projectDir/src/integration-test/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'io.micrometer:micrometer-registry-prometheus'

//    implementation 'org.springframework.cloud:spring-cloud-starter-config'
//    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

//    implementation 'org.springdoc:springdoc-openapi-ui:1.4.3'

    implementation group: 'io.minio', name: 'minio', version: '8.4.1'
    implementation 'com.amazonaws:aws-java-sdk:1.11.163'
    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.4.4'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'junit:junit'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.springframework.boot:spring-boot-dependencies:2.6.8"
    }
}

test {
    useJUnitPlatform()
}


